[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

eval "$(rbenv init -)"


# Install theme (needs to be brew installed)
fpath+=("$(brew --prefix)/share/zsh/site-functions")
autoload -U promptinit; promptinit
prompt pure

# Use z
. $(brew --prefix)/etc/profile.d/z.sh

# zsh's default history is very small, so we make it bigger
export SAVEHIST=100000 # Number of commands stored in history file
export HISTSIZE=50000
setopt INC_APPEND_HISTORY # append commands to file immediately, not on shell close
setopt HIST_IGNORE_ALL_DUPS # Don't write duplicate commands to history
setopt HIST_IGNORE_SPACE # Don't write commands that start with a space to history
 
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Setup asdf for managing versions of erlang, elixir, and maybe other stuff
. $(brew --prefix asdf)/libexec/asdf.sh
. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash

# Set CLICOLOR if you want Ansi Colors in iTerm2
export CLICOLOR=1

# Set colors to match iTerm2 Terminal Colors
export TERM=xterm-256color

export XDG_CONFIG_HOME=~/.config
# Aliases
alias vim="nvim"

# Path additions

# Add krew bin to path. This is installed with scripts/k8s-krew, and is used for kubectl plugin management
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# Used for aws sso cli which is for STW
autoload -Uz +X compinit && compinit
autoload -Uz +X bashcompinit && bashcompinit
# For STW
alias aws-dev="aws-sso-profile dev:AdministratorAccess"
alias docker-build="docker-buildx build --build-arg NODE_OPTIONS=--max-old-space-size=16384"
# BEGIN_AWS_SSO_CLI for STW

# AWS SSO requires `bashcompinit` which needs to be enabled once and
# only once in your shell.  Hence we do not include the two lines:
#
# autoload -Uz +X compinit && compinit
# autoload -Uz +X bashcompinit && bashcompinit
#
# If you do not already have these lines, you must COPY the lines 
# above, place it OUTSIDE of the BEGIN/END_AWS_SSO_CLI markers
# and of course uncomment it

__aws_sso_profile_complete() {
     local _args=${AWS_SSO_HELPER_ARGS:- -L error}
    _multi_parts : "($(/opt/homebrew/bin/aws-sso ${=_args} list --csv Profile))"
}

aws-sso-profile() {
    local _args=${AWS_SSO_HELPER_ARGS:- -L error}
    if [ -n "$AWS_PROFILE" ]; then
        echo "Unable to assume a role while AWS_PROFILE is set"
        return 1
    fi

    if [ -z "$1" ]; then
        echo "Usage: aws-sso-profile <profile>"
        return 1
    fi

    eval $(/opt/homebrew/bin/aws-sso ${=_args} eval -p "$1")
    if [ "$AWS_SSO_PROFILE" != "$1" ]; then
        return 1
    fi
}

aws-sso-clear() {
    local _args=${AWS_SSO_HELPER_ARGS:- -L error}
    if [ -z "$AWS_SSO_PROFILE" ]; then
        echo "AWS_SSO_PROFILE is not set"
        return 1
    fi
    eval $(/opt/homebrew/bin/aws-sso ${=_args} eval -c)
}

compdef __aws_sso_profile_complete aws-sso-profile
complete -C /opt/homebrew/bin/aws-sso aws-sso

# END_AWS_SSO_CLI
